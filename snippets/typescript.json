{
    "NgRx Actions Setup": {
        "prefix": "ngrx-actions-setup",
        "description": "NgRx actions fully configured with action constants, creators with success and fail.",
        "body": [
            "import { Action } from '@ngrx/store';",
            "",
            "export const ${1:ACTION_CONST} = \"${1/[\\_]/ /g}\"",
            "export const ${1}_SUCCESS = \"${1/[\\_]/ /g} SUCCESS\"",
            "export const ${1}_FAIL = \"${1/[\\_]/ /g} FAIL\"",
            "",
            "export class ${2:ActionCreator} implements Action {",
            "\treadonly type = ${1};",
            "\tconstructor() { }",
            "}\n",
            "export class ${2}Success implements Action {",
            "\treadonly type = ${1}_SUCCESS;",
            "\tconstructor(public payload: any) { }",
            "}\n",
            "export class ${2}Fail implements Action {",
            "\treadonly type = ${1}_FAIL;",
            "\tconstructor(public payload: any) { }",
            "}\n",
            "export type Actions = ${2} | ${2}Success | ${2}Fail;"
        ]
    },
    "NgRx Actions CRUD Setup": {
        "prefix": "ngrx-actions-setup-crud",
        "description": "NgRx actions for CRUD operations.",
        "body": [
            "import { Action } from '@ngrx/store';",
            "",
            "export const ${1:ACTION_CONST} = \"${1/[\\_]/ /g}\"",
            "export const ${1}_SUCCESS = \"${1/[\\_]/ /g} SUCCESS\"",
            "export const ${1}_FAIL = \"${1/[\\_]/ /g} FAIL\"",
            "",
            "export class Load${2:ActionCreator} implements Action {",
            "\treadonly type = ${1};",
            "}\n",
            "export class Load${2}Success implements Action {",
            "\treadonly type = ${1}_SUCCESS;",
            "\tconstructor(public payload: any) { }",
            "}\n",
            "export class Load${2}Fail implements Action {",
            "\treadonly type = ${1}_FAIL;",
            "\tconstructor(public payload: any) { }",
            "}",
            "",
            "export const CREATE_${3:ACTION_CONST} = \"CREATE ${3}\"",
            "export const CREATE_${3}_SUCCESS = \"CREATE ${3} SUCCESS\"",
            "export const CREATE_${3}_FAIL = \"CREATE ${3} FAIL\"",
            "",
            "export class Create${4:ActionCreator} implements Action {",
            "\treadonly type = CREATE_${3};",
            "\tconstructor(public payload: any) { }",
            "}\n",
            "export class Create${4}Success implements Action {",
            "\treadonly type = CREATE_${3}_SUCCESS;",
            "\tconstructor(public payload: any) { }",
            "}\n",
            "export class Create${4}Fail implements Action {",
            "\treadonly type = CREATE_${3}_FAIL;",
            "\tconstructor(public payload: any) { }",
            "}",
            "",
            "export const UPDATE_${3} = \"UPDATE ${3}\"",
            "export const UPDATE_${3}_SUCCESS = \"UPDATE ${3} SUCCESS\"",
            "export const UPDATE_${3}_FAIL = \"UPDATE ${3} FAIL\"",
            "",
            "export class Update${4} implements Action {",
            "\treadonly type = UPDATE_${3};",
            "\tconstructor(public payload: any) { }",
            "}\n",
            "export class Update${4}Success implements Action {",
            "\treadonly type = UPDATE_${3}_SUCCESS;",
            "\tconstructor(public payload: any) { }",
            "}\n",
            "export class Update${4}Fail implements Action {",
            "\treadonly type = UPDATE_${3}_FAIL;",
            "\tconstructor(public payload: any) { }",
            "}",
            "",
            "export const DELETE_${3} = \"DELETE ${3:ACTION_STR}\"",
            "export const DELETE_${3}_SUCCESS = \"DELETE ${3} SUCCESS\"",
            "export const DELETE_${3}_FAIL = \"DELETE ${3} FAIL\"",
            "",
            "export class Delete${4:ActionCreator} implements Action {",
            "\treadonly type = DELETE_${3};",
            "\tconstructor(public id: number) { }",
            "}\n",
            "export class Delete${4}Success implements Action {",
            "\treadonly type = DELETE_${3}_SUCCESS;",
            "\tconstructor(public payload: any) { }",
            "}\n",
            "export class Delete${4}Fail implements Action {",
            "\treadonly type = DELETE_${3}_FAIL;",
            "\tconstructor(public payload: any) { }",
            "}",
            "",
            "export type Actions =",
            "\t| Load${2}",
            "\t| Load${2}Success",
            "\t| Load${2}Fail",
            "\t| Create${4}",
            "\t| Create${4}Success",
            "\t| Create${4}Fail",
            "\t| Update${4}",
            "\t| Update${4}Success",
            "\t| Update${4}Fail",
            "\t| Delete${4}",
            "\t| Delete${4}Success",
            "\t| Delete${4}Fail;",
            ""
        ]
    },
    "NgRx Basic Action": {
        "prefix": "ngrx-action",
        "description": "NgRx action constant and creator.",
        "body": [
            "export const ${1:ACTION_CONST} = \"${1/[\\_]/ /g}\"\n",
            "export class ${2:ActionCreator} implements Action {",
            "\treadonly type = ${1};",
            "\tconstructor() { }",
            "}\n"
        ]
    },
    "NgRx Success Action": {
        "prefix": "ngrx-action-success",
        "description": "NgRx action constant and creator as success",
        "body": [
            "export const ${1:ACTION_CONST}_SUCCESS = \"${1/[\\_]/ /g} SUCCESS\"\n",
            "export class ${2:ActionCreator}Success implements Action {",
            "\treadonly type = ${1}_SUCCESS;",
            "\tconstructor(public payload: any) { }",
            "}\n"
        ]
    },
    "NgRx Fail Action": {
        "prefix": "ngrx-action-fail",
        "description": "NgRx action constant and creator as  fail.",
        "body": [
            "export const ${1:ACTION_CONST}_FAIL = \"${1/[\\_]/ /g} FAIL\"\n",
            "export class ${3:ActionCreator} implements Action {",
            "\treadonly type = ${1}_FAIL;",
            "\tconstructor(public payload: any) { }",
            "}\n"
        ]
    },
    "NgRx Effects Setup": {
        "prefix": "ngrx-effect-setup",
        "description": "NgRx effect setup",
        "body": [
            "import { Injectable } from '@angular/core';",
            "import { Actions, Effect } from '@ngrx/effects';",
            "",
            "import { of } from 'rxjs';",
            "import { catchError, map, switchMap, ofType } from 'rxjs/operators';",
            "",
            "import * as ${2:alias} from '${1:actions}';",
            "//import all requried services or any dependencies",
            "",
            "@Injectable()",
            "export class ${3:Name}Effects {",
            "\tconstructor(private action$: Actions) { }",
            "",
            "\t@Effect()",
            "\t${4:effectName}$ = this.action$.pipe(",
            "\t\tofType(${2}${5:ACTION_TYPE}),",
            "\t\tswitchMap(() => {",
            "\t\t\t/*return this.myService().pipe(",
            "\t\t\t\tmap(data => data),",
            "\t\t\t\tcatchError(error => of(error))",
            "\t\t\t\t//dispatch action with payload in `map`",
            "\t\t\t\t//dispatch action with error in `catchError`",
            "\t\t\t);*/",
            "\t\t})",
            "\t);",
            "}"
        ]
    },
    "NgRx Effect": {
        "prefix": "ngrx-effect",
        "description": "NgRx effect",
        "body": [
            "@Effect()",
            "${1:effectName}$ = this.action$.pipe(",
            "\tofType(${2:ACTION_TYPE}),",
            "\tswitchMap(() => {",
            "\t\t/*return this.myService().pipe(",
            "\t\t\tmap(data => data),",
            "\t\t\tcatchError(error => error)",
            "\t\t);*/",
            "\t})",
            ");"
        ]
    },
    "NgRx Reducer Setup": {
        "prefix": "ngrx-reducer",
        "description": "NgRx reducer setup",
        "body": [
            "import * as ${2:alias} from '${1:actions}';",
            "//import or declare state",
            "",
            "export const initialState = {",
            "\t//set initial state",
            "};",
            "export function ${3:name}Reducer(state = initialState, action: ${2}${4:AllActions}) {",
            "\tswitch (action.type) {",
            "\t\tcase ${2}${5:ACTION_TYPE}: {",
            "\t\t\t//add your code",
            "\t\t\treturn { ...state };",
            "\t\t}",
            "",
            "\t\tdefault: ",
            "\t\t\treturn state;",
            "\t}",
            "}"
        ]
    },
    "NgRx Reducer Switch Case": {
        "prefix": "ngrx-case",
        "description": "NgRx Reducer Switch Case",
        "body": [
            "case ${1:alias}${2:ACTION_TYPE}: {",
            "\t//add your code",
            "\treturn { ...state };",
            "}",
            ""
        ]
    },
    "NgRx Select Store": {
        "prefix": "ngrx-store-select",
        "description": "NgRx select store",
        "body": [
            "this.store.pipe(select('${1:sliceOfState}'))"
        ]
    },
    "NgRx Dispatch Action": {
        "prefix": "ngrx-dispatch-action",
        "description": "NgRx Dispatch Action",
        "body": [
            "this.store.dispatch(${1:ActionClass});"
        ]
    },
    "NgRx Selector": {
        "prefix": "ngrx-selector",
        "description": "NgRx Selector",
        "body": [
            "export const ${4:getStateSlice} = () =>",
            "\tcreateSelector(${1:getState}, (state: ${2:any}) => state${3:state});"
        ]
    },
    "NgRx Feature Selector": {
        "prefix": "ngrx-feat-selector",
        "description": "NgRx Feature Selector",
        "body": [
            "export const get${3:state} = createFeatureSelector<${2:any}>('${1:selector}');"
        ]
    }
}
